; *************************
; Project: FLOP
; File: FLOPTest.dasm
; *************************
;
; Writes a sample floppy
;
; press a few keys until a 'D' for done appears, then use the floppy.
; the floppy will contain two files, ffile.txt and dude.exe
; ffile.txt contains a compressed ascii string, dude.exe spans
; across two sectors, starts with 0x1337, has 0x1338 and a few 0x4c
; inside and ends with 0x1339.

:_main
	SET C, hwenum_targets
 	SET Y, 5
	JSR _hwenum
    
    SET A, 3
    SET B, 2          ; interrupts with message 2 mean key event
    HWI [keyboard_id]
    
	SET A, 0
	SET B, 0x8000     ; map screen to 8000
	HWI [lem1802_id]
    
    SET A, 1
    SET X, 0x35
    HWI [m35fd_id]    ; interrupt 0x35 means floppy state change
    
    IAS _flop_interrupt
    
    SET A, 3
    SET X, 100
    SET Y, _sector_empty
    
    ;SET PUSH, PC
    ;SET PUSH, 0
    ;;SET PC, _flop_state_change ; draw initial state

_flop_loop:
	SET X, 0
	SET PC, _flop_wait
	
	SET A, 0
	HWI [m35fd_id]    ; poll
	
:_flop_wait
	ADD X, 1
	IFL X, 3000
		SET PC, _flop_wait
 	SET PC, _flop_loop
    
:_flop_interrupt
	IFN A, 0x35
		IFN A, 2
			RFI 0
			
	IFE A, 0x35
		SET PC, _flop_state_change
	
	SET A, 0
	HWI [m35fd_id]    ; poll
	IFE B, 0x0001
		IFN [0x8000], 0xf044
			JSR _flop_load
:_flop_state_change
	SET J, _flop_stfu
	SET I, 0x8040
	SET B, 0xf000
	JSR _scr_packed_string ; clear text
	
	SET A, 0
	HWI [m35fd_id]    ; poll
	
	IFN C, 0
		SET Z, C
	
	IFE B, 0x0000
		SET J, _flop_no_media
	IFE B, 0x0001
		SET J, _flop_ready
	IFE B, 0x0002
		SET J, _flop_ready_wp
	IFE B, 0x0003
		SET J, _flop_busy
	SET I, 0x8040
	SET B, 0xf000
	JSR _scr_packed_string
	
	RFI 0
:_flop_load
	SET X, _sector_table
	ADD X, [_flop_loading]
	SET Y, [X+1]
	SET X, [X]
	
	IFE Y, _sector_1439
		SET [0x8000], 0xf044
		
	SET A, 3	
	HWI [m35fd_id]
	
	ADD [_flop_loading], 2
	SET PC, POP

:_flop_loading dat 0
:_flop_no_media DAT 0x4e6f, 0x206d, 0x6564, 0x6961, 0
:_flop_ready DAT 0x5265, 0x6164, 0x7900, 0
:_flop_ready_wp DAT 0x5265, 0x6164, 0x7920, 0x2857, 0x5029, 0
:_flop_busy DAT 0x4275, 0x7379, 0
:_flop_stfu DAT 0x2020, 0x2020, 0x2020, 0x2020, 0x2020, 0
    
    
; hardware enumeration
:setup_keyboard
            SET [keyboard_id], I   ; I holds the hardware ID, alternatively check hwenum_targets + 3
            SET PC, POP            ; Identified handlers need to pop PC

:setup_clock
            SET [clock_id], I
            SET PC, POP
            
:setup_lem1802
    		SET [lem1802_id], I
            SET PC, POP
            
:setup_m35fd
    		SET [m35fd_id], I
            SET PC, POP

:setup_unknown
    		SET [m35fd_id], I
            SET PC, POP


:keyboard_id DAT 0xffff
:clock_id    DAT 0xffff
:m35fd_id    DAT 0xffff
:lem1802_id  DAT 0xffff

:hwenum_targets
	DAT setup_unknown                           ; Start with one word address to the unknown setup routine
	DAT 0x30cf, 0x7406, 0xffff, setup_keyboard  ; one hardware setup is 4 words long
	DAT 0x7349, 0xf615, 0xffff, setup_lem1802   ; Format: 4 higher ID bits, 4 lower ID bits, recognized
	DAT 0x12d0, 0xb402, 0xffff, setup_clock     ; hardware ID (default 0xffff), last address to hwhandler
	DAT 0x4fd5, 0x24c5, 0xffff, setup_m35fd
	
	
.include "../include/hwenum.dasm"
.include "../include/screenutils.dasm"

:_sector_table
dat 0, _sector_zero
dat 1, _sector_one
dat 5, _sector_five
dat 6, _sector_six
dat 1437, _sector_1437
dat 1438, _sector_1438
dat 1439, _sector_1439

:_sector_zero
dat 0x83df ; FLOP magic number (0x8adf)                                                    ;+  1
dat 0x0001 ; version                                                                       ;+  1

dat 0x1111 ; header size                                                                  ;+  1

; 16-padded drive name ( "FLOP Demo Floppy" )
dat 0x464c, 0x4f50, 0x2044, 0x656d, 0x6f20, 0x466c, 0x6f70, 0x7079, 0, 0, 0, 0, 0, 0, 0, 0 ;+ 16

dat 0x2 ; filelist size
.reserve 492 ; reserved for more header data                                               ; 493
                                                                                           ;=512
                                                                                           
:_sector_one
dat 0x0
dat 0x1000 ; 0001000000000000 sector one = header
dat 0x0
dat 0x2000 ; 0010000000000000 sector two = blocklist
dat 0x0
dat 0x2000 ; 0010000000000000 sector three = blocklist 
dat 0x0
dat 0x2000 ; 0010000000000000 sector four = blocklist
dat 0x0
dat 0x3000 ; 0011000000000000 sector five = file list                                    ; 20
.reserve 492

:_sector_empty
.reserve 512 * 3

:_sector_five
.reserve 315
; 316
dat 0x24   ; 0000000000100100 last set word 0x24
dat 0x4004 ; 0100000000000100 type = data, file id 1  [ dude.exe ]   ; sector 1437

dat 0x200  ; 0010000000000000 last set word 0x200 (512)
dat 0x4004 ; 0100000000000100 type = data, file id 1 [ dude.exe ]    ; sector 1438

dat 0x20   ; 0000000000100000 last set word 0x20
dat 0x4000 ; 0100000000000000 type = data, file id 0 [ ffile.txt ]  ; sector 1439

.reserve 191 ; 512 - ( 315 + 6 = 321 )

:_sector_six
dat 0x6666, 0x696c, 0x6531, 0x2e74, 0x7874, 0 ; "ffile1.txt" (filename)
dat 0x20, 0x1 ; filesize, #blocks
dat 1439

dat 0x6475, 0x6465, 0x2e65, 0x7865, 0 ; "dude.exe" (filename)
dat 0x224, 0x2 ; filesize, #blocks
dat 1438, 1437
.reserve 499 ; 512 - 13


:_sector_1437
dat 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c
dat 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c
dat 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c
dat 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c, 0x4c4c
dat 0x1339
.reserve 476 ; 512 - 36

:_sector_1438
dat 0x6578, 0x6520, 0x726f, 0x636b, 0x7321
dat 0x1337
dat 0x4142, 0x4344
.reserve 503
dat 0x1338

:_sector_1439
dat 0x6865, 0x792c, 0x2074, 0x6869, 0x7320, 0x6973, 0x2066, 0x6669, 0x6c65, 0x312e
dat 0x7478, 0x7421, 0x2121, 0x6768, 0x694a, 0x6162, 0x6344, 0x4546, 0x6768, 0x694a
dat 0x6162, 0x6344, 0x4546, 0x6768, 0x694a, 0x6162, 0x6344, 0x4546, 0x6768, 0x694a
dat 0x6162, 0
.reserve 480 ; 512 - 32